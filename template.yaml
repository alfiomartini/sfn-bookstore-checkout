AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: |
  A serverless bookstore checkout application
  to demonstrate the use of Step Functions.
  This application includes various AWS services
  such as Lambda, DynamoDB, SNS, SQS, and Step Functions.

Parameters:
  CourierEmail:
    Type: String
    Description: "The email address to subscribe to the NotifyCourierTopic"

Globals:
  Function:
    Runtime: nodejs20.x
    CodeUri: dist/src
    Environment:
      Variables:
        BOOK_TABLE: !Ref BookTable
        USER_TABLE: !Ref UserTable

Resources:
  OrdersQueue:
    Type: "AWS::SQS::Queue"

  NotifyCourierTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        - Protocol: "email"
          Endpoint: !Ref CourierEmail

  BookTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "sfn-bookstore-checkout-BookTable"
      AttributeDefinitions:
        - AttributeName: bookId
          AttributeType: S
      KeySchema:
        - AttributeName: bookId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
    Metadata:
      Comment: |
        The BookTable is expected to have the following attributes:
        - bookId (String): Primary key
        - title (String): Title of the book
        - author (String): Author of the book
        - price (Number): Price of the book
        - quantity (Number): Quantity of the book in stock

  UserTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "sfn-bookstore-checkout-UserTable"
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
    Metadata:
      Comment: |
        The UserTable is expected to have the following attributes:
        - userId (String): Primary key
        - name (String): Name of the user
        - points (Number): Loyalty points of the use

  CheckInventoryFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: index.checkInventory
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BookTable
  CalculateTotalFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: index.calculateTotal

  DeductPointsFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: index.deductPoints
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable

  UpdateBookQuantityFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: index.updateBookQuantity
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BookTable

  RedeemPointsFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: index.redeemPoints
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable

  BillCustomerFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: index.billCustomer

  RestoreRedeemPointsFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: index.restoreRedeemPoints
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable

  RestoreQuantityFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: index.restoreQuantity
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BookTable

  SQSWorkerFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: index.sqsWorker
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BookTable
        - Statement:
            Effect: Allow
            Action:
              - "states:SendTaskSuccess"
              - "states:SendTaskFailure"
            Resource: "*"
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt OrdersQueue.Arn
            BatchSize: 1

  StepFunctionsExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "states.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "StepFunctionsExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:Query"
                Resource:
                  - !GetAtt BookTable.Arn
                  - !GetAtt UserTable.Arn
              - Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource: !Ref NotifyCourierTopic
              - Effect: "Allow"
                Action:
                  - "sqs:SendMessage"
                Resource: !GetAtt OrdersQueue.Arn
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt CheckInventoryFunction.Arn
                  - !GetAtt CalculateTotalFunction.Arn
                  - !GetAtt DeductPointsFunction.Arn
                  - !GetAtt UpdateBookQuantityFunction.Arn
                  - !GetAtt RedeemPointsFunction.Arn
                  - !GetAtt BillCustomerFunction.Arn
                  - !GetAtt RestoreRedeemPointsFunction.Arn
                  - !GetAtt RestoreQuantityFunction.Arn
                  - !GetAtt SQSWorkerFunction.Arn

  StoreCheckoutFlowStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn
      Definition:
        StartAt: checkInventory
        States:
          checkInventory:
            Type: Task
            Resource: !GetAtt CheckInventoryFunction.Arn
            Catch:
              - ErrorEquals: [BookNotFound]
                Next: BookNotFoundError
              - ErrorEquals: [BookOutOfStock]
                Next: BookOutOfStockError
            ResultPath: "$.book"
            Next: calculateTotal
          calculateTotal:
            Type: Task
            Resource: !GetAtt CalculateTotalFunction.Arn
            ResultPath: "$.total"
            Next: isRedeemNeeded
          isRedeemNeeded:
            Type: Choice
            Choices:
              - Variable: $.redeem
                BooleanEquals: true
                Next: RedeemPoints
            Default: BillCustomer
          RedeemPoints:
            Type: Task
            Resource: !GetAtt RedeemPointsFunction.Arn
            ResultPath: "$.total"
            Catch:
              - ErrorEquals: [States.ALL]
                Next: RedeemPointsError
            Next: BillCustomer
          BillCustomer:
            Type: Task
            Resource: !GetAtt BillCustomerFunction.Arn
            ResultPath: "$.billingStatus"
            Retry:
              - ErrorEquals: [States.ALL]
                MaxAttempts: 0
            Catch:
              - ErrorEquals: [States.ALL]
                ResultPath: "$.customerBilling"
                Next: BillingError
            Next: PrepareOrder
          PrepareOrder:
            Type: Task
            Resource: arn:aws:states:::sqs:sendMessage.waitForTaskToken
            Parameters:
              QueueUrl: !GetAtt OrdersQueue.QueueUrl
              MessageBody:
                Input.$: "$"
                Token.$: "$$.Task.Token"
            ResultPath: "$.courierInfo"
            Catch:
              - ErrorEquals: [NoCourierAvailable]
                ResultPath: "$.courierError"
                Next: RefundCustomer
            Next: DispatchOrder
          DispatchOrder:
            Type: Task
            Resource: arn:aws:states:::sns:publish
            Parameters:
              TopicArn: !Ref NotifyCourierTopic
              Message.$: "$"
            ResultSelector:
              dispatchedMessage: true
            ResultPath: "$.dispatched"
            Next: Dispatched
          Dispatched:
            Type: Pass
            Result: "Your order will be dispatched in 24 hours"
            End: true
          RestoreRedeemPoints:
            Type: Task
            Resource: !GetAtt RestoreRedeemPointsFunction.Arn
            End: true
          RestoreQuantity:
            Type: Task
            Resource: !GetAtt RestoreQuantityFunction.Arn
            ResultPath: "$.quantityRestoreStatus"
            Next: RestoreRedeemPoints
          RefundCustomer:
            Type: Pass
            Result: "Customer is refunded"
            ResultPath: "$.refundStatus"
            Next: RestoreQuantity
          BookNotFoundError:
            Type: Pass
            Result: "No such book available"
            End: true
          BookOutOfStockError:
            Type: Pass
            Result: "Sorry, the books is out of stock"
            End: true
          RedeemPointsError:
            Type: Pass
            Result: "Error in redeeming points"
            End: true
          BillingError:
            Type: Pass
            Result: "Billing error"
            ResultPath: "$.billingStatus"
            Next: RestoreRedeemPoints
